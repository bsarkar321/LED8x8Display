"""
Various utilities for Tetris
"""

import numpy as np
from enum import Enum


class Action(Enum):
    NOOP = 0
    ROTATE = 1
    LEFT = 2
    DOWN = 3
    RIGHT = 4

    QUIT = 5
    RESTART = 6

KEYS = {
    'w': Action.ROTATE,
    'a': Action.LEFT,
    's': Action.DOWN,
    'd': Action.RIGHT,
    'q': Action.QUIT,
    'r': Action.RESTART
}

BLOCKS = [
    # 1:
    [
        [
            [0,0,0,0],
            [0,0,0,0],
            [1,1,1,1],
            [0,0,0,0]
        ],[
            [0,0,1,0],
            [0,0,1,0],
            [0,0,1,0],
            [0,0,1,0]
        ],
    ],
    # 2:
    [
        [
            [0,0,0,0],
            [0,2,2,0],
            [0,2,2,0],
            [0,0,0,0]
        ]
    ],
    # 3
    [
        [
            [0,0,0],
            [3,3,3],
            [0,0,3]
        ],[
            [0,3,0],
            [0,3,0],
            [3,3,0]
        ],[
            [3,0,0],
            [3,3,3],
            [0,0,0]
        ],[
            [0,3,3],
            [0,3,0],
            [0,3,0]
        ]
    ],
    # 4
    [
        [
            [0,0,0],
            [4,4,4],
            [4,0,0]
        ],[
            [4,4,0],
            [0,4,0],
            [0,4,0]
        ],[
            [0,0,4],
            [4,4,4],
            [0,0,0]
        ],[
            [0,4,0],
            [0,4,0],
            [0,4,4]
        ]
    ],
    # 5
    [
        [
            [0,0,0],
            [0,5,5],
            [5,5,0]
        ],[
            [0,5,0],
            [0,5,5],
            [0,0,5]
        ],[
            [0,0,0],
            [0,5,5],
            [5,5,0]
        ],[
            [0,5,0],
            [0,5,5],
            [0,0,5]
        ]
    ],
    # 6
    [
        [
            [0,0,0],
            [6,6,6],
            [0,6,0]
        ],[
            [0,6,0],
            [6,6,0],
            [0,6,0]
        ],[
            [0,6,0],
            [6,6,6],
            [0,0,0]
        ],[
            [0,6,0],
            [0,6,6],
            [0,6,0]
        ]
    ],
    # 7
    [
        [
            [0,0,0],
            [7,7,0],
            [0,7,7]
        ],[
            [0,0,7],
            [0,7,7],
            [0,7,0]
        ],[
            [0,0,0],
            [7,7,0],
            [0,7,7]
        ],[
            [0,0,7],
            [0,7,7],
            [0,7,0]
        ]
    ],
]


NUMBERS = [
    [
        [0,1,1,0],
        [1,0,0,1],
        [1,0,0,1],
        [1,0,0,1],
        [0,1,1,0]
    ],
    [
        [0,0,0,1],
        [0,0,1,1],
        [0,1,0,1],
        [0,0,0,1],
        [0,0,0,1],
    ],
    [
        [0,1,1,0],
        [1,0,0,1],
        [0,0,1,0],
        [0,1,0,0],
        [1,1,1,1]
    ],
    [
        [0,1,1,0],
        [1,0,0,1],
        [0,0,1,0],
        [1,0,0,1],
        [0,1,1,0]
    ],
    [
        [0,0,1,1],
        [0,1,0,1],
        [1,1,1,1],
        [0,0,0,1],
        [0,0,0,1]
    ],
    [
        [1,1,1,1],
        [1,1,1,0],
        [0,0,0,1],
        [1,0,0,1],
        [0,1,1,0]
    ],
    [
        [0,0,1,0],
        [0,1,0,0],
        [1,1,1,0],
        [1,0,0,1],
        [0,1,1,0]
    ],
    [
        [1,1,1,1],
        [0,0,0,1],
        [0,0,1,0],
        [0,1,0,0],
        [1,0,0,0]
    ],
    [
        [0,1,1,0],
        [1,0,0,1],
        [0,1,1,0],
        [1,0,0,1],
        [0,1,1,0]
    ],
    [
        [0,1,1,0],
        [1,0,0,1],
        [0,1,1,1],
        [0,0,1,0],
        [0,1,0,0]
    ]
]

# determine if two grids overlap
def grid_intersection(g1, g2):
    return np.any((g1 != 0) & (g2 != 0))


# slice array based on actions to take
def action_slice(arr, actions):
    r = arr[actions[0]:] if actions[0] >= 0 else arr[:actions[0]]
    return r[:, actions[1]:] if actions[1] >= 0 else r[:, :actions[1]]


# Return an 8x8 display for the specified number
def display_for_num(num):
    first_dig = (num // 10) % 10
    second_dig = num % 10

    output = np.zeros((8, 8), dtype=np.byte)
    # do not show a leading zero
    if first_dig != 0:
        output[0:5, :4] = np.array(NUMBERS[first_dig])
    output[3:8, 4:] = np.array(NUMBERS[second_dig])

    return output * 15
